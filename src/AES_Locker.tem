/*
* AES_Locker.tem
* Allow encryption/decryption of arbitary size files
* Uses the Crypto++ Library
* Author: Mohammad Ghasembeigi
* URL: http://mohammadg.com
*/

#include "openssl\evp.h"
#include <assert.h>

namespace CV
{
  template<unsigned int N>
  AESLocker<N>::AESLocker(std::string key, std::string ivec) : AESLocker<N>::AESLocker() {
    assert(key.size() == N / 8); //check byte size of input string
    assert(ivec.size() >= CryptoPP::AES::BLOCKSIZE); //Ensure ivex length is large enough
    this->key.Assign((const byte *)key.c_str(), key.size());
    memcpy(this->ivec, ivec.c_str(), sizeof(ivec));
  }

  template <unsigned int N>
  bool AESLocker<N>::encrypt_file(std::ifstream &ifs, std::ofstream &ofs) {
    if (!ifs || !ofs) {
      std::cerr << "Error: ifs or ofs could not be opened.";
      return false;
    }

    try
    {
      CryptoPP::GCM<  CryptoPP::AES >::Encryption e;
      e.SetKeyWithIV(this->key, this->key.size(), this->ivec, sizeof(this->ivec));

      CryptoPP::FileSource(ifs, true, new CryptoPP::AuthenticatedEncryptionFilter(e,
        new  CryptoPP::FileSink(ofs), false, TAG_SIZE));

    }
    catch (CryptoPP::Exception&)
    {
      //ERROR
      return false;
    }

    return true;
  }

  template <unsigned int N>
  bool AESLocker<N>::encrypt_bytearray(const byte *input, size_t inputSize, byte *output) {
    try
    {

      CryptoPP::GCM<  CryptoPP::AES >::Encryption e;
      e.SetKeyWithIV(this->key, this->key.size(), this->ivec, sizeof(this->ivec));

      CryptoPP::ArraySource(input, inputSize, true, new CryptoPP::AuthenticatedEncryptionFilter(e,
        new CryptoPP::ArraySink(output, inputSize + TAG_SIZE), false, TAG_SIZE));
    }
    catch (CryptoPP::Exception&)
    {
      //ERROR
      return false;
    }

    return true;
  }

  template <unsigned int N>
  bool AESLocker<N>::decrypt_file(std::ifstream &ifs, std::ofstream &ofs) {
    if (!ifs || !ofs) {
      std::cerr << "Error: ifs or ofs could not be opened.";
      return false;
    }

    try
    {
      CryptoPP::GCM<  CryptoPP::AES >::Decryption d;
      d.SetKeyWithIV(this->key, this->key.size(), this->ivec, sizeof(this->ivec));

      CryptoPP::AuthenticatedDecryptionFilter df(d,
        new  CryptoPP::FileSink(ofs), //new StringSink(rpdata)
        0, TAG_SIZE
        ); // AuthenticatedDecryptionFilter


      // The StringSource dtor will be called immediately
      //  after construction below. This will cause the
      //  destruction of objects it owns. To stop the
      //  behavior so we can get the decoding result from
      //  the DecryptionFilter, we must use a redirector
      //  or manually Put(...) into the filter without
      //  using a StringSource.

      CryptoPP::FileSource(ifs, true,
        new  CryptoPP::Redirector(df) // PASS_EVERYTHING
        );

      // If the object does not throw, here's the only
      //  opportunity to check the data's integrity
      this->INTEGRITY_OK = df.GetLastResult();
    }
    catch (CryptoPP::Exception&)
    {
      //ERROR
      return false;
    }

    return true;
  }

  template <unsigned int N>
  bool AESLocker<N>::decrypt_bytearray(const byte *input, size_t inputSize, byte *output) {

    try
    {
      CryptoPP::GCM<  CryptoPP::AES >::Decryption d;
      d.SetKeyWithIV(this->key, this->key.size(), this->ivec, sizeof(this->ivec));

      CryptoPP::AuthenticatedDecryptionFilter df(d,
        new  CryptoPP::ArraySink(output, inputSize - TAG_SIZE), //new StringSink(rpdata)
        0, TAG_SIZE
        ); // AuthenticatedDecryptionFilter


      // The StringSource dtor will be called immediately
      //  after construction below. This will cause the
      //  destruction of objects it owns. To stop the
      //  behavior so we can get the decoding result from
      //  the DecryptionFilter, we must use a redirector
      //  or manually Put(...) into the filter without
      //  using a StringSource.

      CryptoPP::ArraySource(input, inputSize, true,
        new CryptoPP::Redirector(df) // PASS_EVERYTHING
        );

      // If the object does not throw, here's the only
      //  opportunity to check the data's integrity
      this->INTEGRITY_OK = df.GetLastResult();
    }
    catch (CryptoPP::Exception&)
    {
      //ERROR
      return false;
    }

    return true;
  }

}